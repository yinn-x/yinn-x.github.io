{"version":3,"file":"static/js/228.b7cc15e5.chunk.js","mappings":"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","sources":["components/Comment/List.tsx","assets/svg/send.svg","components/Comment/Box.tsx","pages/Comment.tsx","pages/Post.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Comment } from '../../models/comment';\nimport { theme } from '../../theme';\nimport { ReactComponent as IconDelete } from '../../assets/svg/delete.svg'\nimport { TimeComment } from '../Util/Time';\n\nconst CommentsContainer = styled.div`\n    align-items: center;\n    h3,strong {\n        color: ${theme.colors.primary};\n        text-decoration: underline 1px;\n        text-underline-offset: .4rem;\n    }\n\n    hr {\n        margin-top: 1.25rem;\n        margin-bottom: 1.25rem;\n        border: 0;\n        border-top: 2px solid ${theme.colors.lightgrey};\n        border-radius: 2px;\n    }\n\n    svg{\n        float: right;\n        fill: ${theme.colors.secondary};\n        width: 1rem;\n        padding-left: .8rem;\n\n        &:hover{\n            fill: ${theme.colors.primary};\n        }\n    }\n\n`;\n\nconst CommentAvatar = styled.img`\n    margin-top: .5rem;\n    width: 2.2rem;\n    height: 2.2rem;\n    border-radius: 50%;\n    /* border: 1px solid rgba(31,35,40,0.15); */\n    padding: .125rem;\n    vertical-align: middle;\n    margin-right: .8rem;\n\n    @media (max-width: 850px) {\n        margin-right: .6rem;\n    }\n`;\n\nconst CommentItem = styled.div`\n    padding-bottom: .3rem;\n    padding: .25rem .125rem;\n    display: flex;\n    align-items: flex-start;  /* Align items to the start of the cross axis (top) */\n    margin: .5rem 0;\n\n    @media (max-width: 850px) {\n        padding: .25rem 0;\n    }\n`;\n\nconst CommentNickname = styled.a`\n    /* font-family: JetBrainsMono; */\n    font-weight: 700;\n    color: ${theme.colors.tertiary};\n    font-size: .95rem;\n`;\n\nconst CommentContent = styled.div`\n    line-height: 1.6rem;\n    font-size: .925rem;\n    color: ${theme.colors.text};\n    padding: .1rem 0;\n\n    span.mention {\n        color: ${theme.colors.tertiary};\n        /* font-weight: 700; */\n    }\n`;\n\nexport const Loading = styled.button`\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    margin: .6rem .8rem 0rem;\n    color: ${theme.colors.primary};\n`;\n\ninterface CommentListProps {\n    comments: Comment[];\n}\n\nconst CommentList: React.FC<CommentListProps> = ({ comments }) => {\n    const [owner, setOwner] = useState(false);\n\n    useEffect(() => {\n        const role = localStorage.getItem('role');\n\n        if (role) {\n            if (role === \"Owner\") {\n                setOwner(true);\n            }\n        }\n    }, []);\n\n    return (\n        <CommentsContainer>\n            <hr />\n            {comments.map((comment) => (\n                <CommentItem key={comment.id}>\n                    <a href={`https://github.com/${comment.githubName}`}>\n                        <CommentAvatar src={comment.avatar} alt=\"\" />\n                    </a>\n                    <CommentContent>\n                        <div>\n                            <CommentNickname target=\"_blank\" href={`https://github.com/${comment.githubName}`}>{comment.githubName}</CommentNickname>\n                            <TimeComment>{comment.time.split(' ')[0]}</TimeComment>\n                            {/* {owner && <div><IconDelete /></div>} */}\n                        </div>\n                        <div>\n                            {comment.content.split(/(@\\S+)/g).map((part, index) => (\n                                part.startsWith('@') ? <span key={index} className=\"mention\">{part}</span> : part\n                            ))}\n                        </div>\n                    </CommentContent>\n                </CommentItem>\n            ))}\n        </CommentsContainer>\n    );\n};\n\n\nexport default CommentList;\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSend(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1699517890106,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"p-id\": 4998,\n    width: 48,\n    height: 48,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M507.904 882.688c-18.432 0-33.28-14.848-33.28-33.28v-655.36c0-18.432 14.848-33.28 33.28-33.28s33.28 14.848 33.28 33.28v654.848c0 18.432-14.848 33.792-33.28 33.792z\",\n    fill: \"\",\n    \"p-id\": 4999\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M787.968 502.784c-8.704 0-16.896-3.072-23.552-9.728L507.904 236.544 251.392 493.056c-12.8 12.8-34.304 12.8-47.104 0-12.8-12.8-12.8-34.304 0-47.104l280.064-280.064c6.144-6.144 14.848-9.728 23.552-9.728s17.408 3.584 23.552 9.728l280.064 280.064c12.8 12.8 12.8 34.304 0 47.104-6.656 6.656-15.36 9.728-23.552 9.728z\",\n    \"p-id\": 5000\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSend);\nexport default __webpack_public_path__ + \"static/media/send.db73a46bf395b204bb7b84979a54c960.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { ReactComponent as Send } from '../../assets/svg/send.svg';\nimport { theme } from '../../theme';\nimport { ErrorMessage } from '../Util/Message';\n\nconst COMMENT_MUTATION = gql`\n  mutation Comment($content: String!, $post_id: Int!) {\n    comment(content: $content, post_id: $post_id) \n  }\n`;\n\n\nconst CommentForm = styled.form`\n  margin: 2rem 0;\n`;\n\nconst CommentInput = styled.textarea`\n  padding: 0.625rem;\n  margin-bottom: 0.625rem;\n  border: 0;\n  border-radius: 1rem;\n  background-color: ${theme.colors.block};\n  width: 85%;\n  height: 7rem;\n  padding: 1rem 1.5rem;\n  resize: none;\n  font-size: 0.9rem;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst CommentButton = styled.button`\n  float: right;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  svg {\n    fill: ${theme.colors.secondary};\n    width: 1.75rem;\n  }\n\n  &:hover {\n    & svg {\n      fill: ${theme.colors.primary};\n    }\n  }\n`;\n\n\nconst CommentBox: React.FC = () => {\n  const { id: postId } = useParams();\n  const [comment, setComment] = useState<string>('');\n\n  const [commentMutation, { error }] = useMutation(COMMENT_MUTATION, {\n    onCompleted: () => {\n      window.location.reload();\n    },\n    onError: (error) => {\n      console.error('Mutation error:', error.message);\n    },\n    context: {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    },\n  });\n\n  const handleCommentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment(e.target.value);\n  };\n\n  const handleCommentSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (comment.trim() !== '' && postId != null) {\n      commentMutation({\n        variables: { content: comment, post_id: parseInt(postId) },\n      });\n    }\n  };\n\n  return (\n    <CommentForm onSubmit={handleCommentSubmit}>\n      <div>\n        <CommentInput\n          placeholder={localStorage.getItem('token') ? \"Write your comment\" : \"Please sign in first\"}\n          value={comment}\n          onChange={handleCommentChange}\n        />\n        <CommentButton type=\"submit\">\n          <Send />\n        </CommentButton>\n      </div>\n      {error && <ErrorMessage>Error: {error.message}</ErrorMessage>}\n\n    </CommentForm>\n  );\n};\n\nexport default CommentBox;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport CommentList, { Loading } from '../components/Comment/List';\nimport CommentBox from '../components/Comment/Box';\nimport { PostCommentContainer } from '../containers/Containers';\nimport { Comment } from '../models/comment';\n\nconst COMMENTS_QUERY = gql`\n  query Comments($postId: Int!, $limit: Int!, $offset: Int!) {\n    comments(\n      filters: { postId: { eq: $postId }, status: { eq: PUBLIC } }\n      orderBy: { time: ASC }\n      pagination: { offset: { limit: $limit, offset: $offset } }\n    ) {\n      nodes {\n        id\n        parentId\n        githubName\n        time\n        content\n      }\n    }\n  }\n`;\n\nconst fetchAvatarWithRetry = async (username: string, attemptsLeft: number = 3): Promise<string> => {\n    try {\n        const response = await fetch(`https://api.github.com/users/${username}`);\n        const data = await response.json();\n        return data.avatar_url;\n    } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        if (attemptsLeft > 1) {\n            return fetchAvatarWithRetry(username, attemptsLeft - 1);\n        } else {\n            return '';\n        }\n    }\n};\n\nconst PostComment: React.FC = () => {\n    const limit = 10;\n    const offset = 0;\n    const { id = '' } = useParams();\n    const [final, setFinal] = useState(false);\n    const [commentAvatars, setCommentAvatars] = useState<string[]>([]);\n    const [avatarsLoaded, setAvatarsLoaded] = useState(false); // Add this state\n\n    const { data: commentsData, loading, fetchMore } = useQuery(COMMENTS_QUERY, {\n        variables: { postId: parseInt(id, 10), limit, offset },\n        fetchPolicy: 'cache-and-network',\n    });\n\n    const comments: Comment[] = commentsData?.comments?.nodes || [];\n    const hasMoreComments = comments.length >= limit;\n\n    const handleLoadMore = () => {\n        fetchMore({\n            variables: { offset: comments.length },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                if (!fetchMoreResult) return prev;\n\n                const newComments: Comment[] = fetchMoreResult.comments.nodes;\n                if (newComments.length < limit) {\n                    setFinal(true);\n                }\n\n                return {\n                    comments: {\n                        nodes: prev.comments.nodes.concat(newComments),\n                    },\n                };\n            },\n        });\n    };\n\n    useEffect(() => {\n        const fetchAvatars = async () => {\n            const avatarPromises = comments.map((comment) =>\n                fetchAvatarWithRetry(comment.githubName)\n            );\n\n            try {\n                const resolvedAvatars = await Promise.all(avatarPromises);\n                setCommentAvatars(resolvedAvatars);\n                setAvatarsLoaded(true); // Set avatarsLoaded to true when avatars are loaded\n            } catch (error) {\n                console.error('Error fetching avatars:', error);\n            }\n        };\n\n        fetchAvatars();\n    }, [comments]);\n\n    // Assign fetched avatar URLs to the comment.avatar property\n    const commentsWithAvatars: Comment[] = comments.map((comment, index) => ({\n        ...comment,\n        avatar: commentAvatars[index] || '',\n    }));\n\n    return (\n        <PostCommentContainer>\n            {avatarsLoaded ? (\n                <CommentList comments={commentsWithAvatars} />\n            ) : (\n                /* Show loading animation when avatars are not loaded */\n                <Loading>Loading Avatars...</Loading>\n            )}\n            {!loading && hasMoreComments && !final && (\n                <Loading onClick={handleLoadMore}>Load More</Loading>\n            )}\n            {!loading && <CommentBox />}\n        </PostCommentContainer>\n    );\n};\n\nexport default PostComment;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport PostDetail from '../components/Post/Detail';\nimport PostComment from './Comment';\nimport { PostContainer } from '../containers/Containers';\nimport Breadcrumbs from '../components/Util/Breadcrumbs';\n\nconst GET_POST = gql`\n  query Posts($postId: Int!) {\n    posts(filters: { id: { eq: $postId } }) {\n      nodes {\n        id\n        title\n        time\n        content\n        status\n        tags {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst breadcrumbItems = [\n  { label: 'Home', to: '/' },\n  { label: 'Posts', to: '/' },\n  { label: 'Detail', to: '/post/:id' },\n];\n\nconst Post: React.FC = () => {\n  const { id } = useParams();\n  const postId = parseInt(id || '', 10);\n\n  const { loading, error, data } = useQuery(GET_POST, {\n    variables: { postId },\n  });\n\n  if (loading) {\n    return <br />;\n  }\n\n  if (error || !data || !data.posts || !data.posts.nodes.length) {\n    return <code>Post not found.</code>;\n  }\n\n  const post = data.posts.nodes[0];\n\n  return (\n    <PostContainer>\n      <Breadcrumbs items={breadcrumbItems} />\n      <PostDetail\n        title={post.title}\n        id={parseInt(post.id)}\n        content={post.content}\n        time={post.time}\n        tags={post.tags.nodes.map((tag: any) => tag.name)}\n      />\n      <PostComment />\n    </PostContainer>\n  );\n};\n\nexport default Post;\n"],"names":["CommentsContainer","styled","div","_templateObject","_taggedTemplateLiteral","theme","colors","primary","lightgrey","secondary","CommentAvatar","img","_templateObject2","CommentItem","_templateObject3","CommentNickname","a","_templateObject4","tertiary","CommentContent","_templateObject5","text","Loading","button","_templateObject6","_ref","comments","owner","setOwner","useState","useEffect","role","localStorage","getItem","_jsxs","children","_jsx","map","comment","href","concat","githubName","src","avatar","alt","target","TimeComment","time","split","content","part","index","startsWith","className","id","_path","_path2","_extends","Object","assign","bind","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgSend","svgRef","title","titleId","props","t","viewBox","xmlns","width","height","ref","d","fill","ForwardRef","COMMENT_MUTATION","gql","CommentForm","form","CommentInput","textarea","block","CommentButton","CommentBox","postId","useParams","setComment","commentMutation","error","useMutation","onCompleted","window","location","reload","onError","console","message","context","headers","Authorization","onSubmit","e","preventDefault","trim","variables","post_id","parseInt","placeholder","value","onChange","type","Send","ErrorMessage","COMMENTS_QUERY","fetchAvatarWithRetry","async","username","attemptsLeft","undefined","response","fetch","json","avatar_url","PostComment","_commentsData$comment","final","setFinal","commentAvatars","setCommentAvatars","avatarsLoaded","setAvatarsLoaded","data","commentsData","loading","fetchMore","useQuery","limit","offset","fetchPolicy","nodes","hasMoreComments","avatarPromises","resolvedAvatars","Promise","all","fetchAvatars","commentsWithAvatars","PostCommentContainer","CommentList","onClick","handleLoadMore","updateQuery","prev","fetchMoreResult","newComments","GET_POST","breadcrumbItems","label","to","Post","posts","post","PostContainer","Breadcrumbs","items","PostDetail","tags","tag","name"],"sourceRoot":""}